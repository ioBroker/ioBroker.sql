// Generated by CoffeeScript 2.6.0
(function() {
    var ConnectionFactory, MySQL2Client, MySQL2ClientPool, MySQL2ConnectionFactory, SQLClient, SQLClientPool, mysql,
        boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

    SQLClient = require('./sql-client').SQLClient;

    SQLClientPool = require('./sql-client-pool').SQLClientPool;

    ConnectionFactory = require('./connection-factory').ConnectionFactory;

    mysql2 = require('mysql2');

    MySQL2ConnectionFactory = class MySQL2ConnectionFactory extends ConnectionFactory {
        constructor() {
            super(...arguments);
            this.open_connection = this.open_connection.bind(this);
            this.close_connection = this.close_connection.bind(this);
        }

        open_connection(options, callback) {
            var connection;
            boundMethodCheck(this, MySQL2ConnectionFactory);
            connection = mysql2.createConnection(options);
            return connection.connect((err) => {
                return callback(err, connection);
            });
        }

        close_connection(connection, callback) {
            boundMethodCheck(this, MySQL2ConnectionFactory);
            if (typeof (connection != null ? connection.end : void 0) === 'function') {
                return connection.end(callback);
            } else {
                return super.close_connection(connection, callback);
            }
        }

    };

    MySQL2Client = class MySQL2Client extends SQLClient {
        constructor(...options) {
            super(...options, new MySQL2ConnectionFactory());
        }

    };

    MySQL2ClientPool = class MySQL2ClientPool extends SQLClientPool {
        constructor(...options) {
            super(...options, new MySQL2ConnectionFactory());
        }

    };

    exports.MySQL2ConnectionFactory = MySQL2ConnectionFactory;

    exports.MySQL2Client = MySQL2Client;

    exports.MySQL2ClientPool = MySQL2ClientPool;

}).call(this);
