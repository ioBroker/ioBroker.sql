# This is a composition of lint and test scripts
# Make sure to update this file along with the others

name: Test and Release

# Run this job on all pushes and pull requests
# as well as tags with a semantic version
on:
  push:
    branches:
      - '*'
    tags:
      # normal versions
      - "v?[0-9]+.[0-9]+.[0-9]+"
      # pre-releases
      - "v?[0-9]+.[0-9]+.[0-9]+-**"
  pull_request: {}

jobs:
  # Performs quick checks before the expensive test runs
  check-and-lint:
    if: contains(github.event.head_commit.message, '[skip ci]') == false

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}


      - name: Install Dependencies
        run: npm install

#      - name: Perform a type check
#        run: npm run check:ts
#        env:
#          CI: true
      # - name: Lint TypeScript code
      #   run: npm run lint
      - name: Test package files
        run: node node_modules/mocha/bin/mocha test/testPackageFiles.js --exit

  # Runs adapter tests on all supported node versions and OSes
  adapter-tests-mysql:
    if: contains(github.event.head_commit.message, '[skip ci]') == false

    needs: [check-and-lint]

    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Set up MySQL
        run: |
          sudo /etc/init.d/mysql start

      - name: Install Dependencies
        run: npm install

      - name: Run MySQL tests
        run: node node_modules/mocha/bin/mocha test/testMySQL*.js --exit
        env:
          SQL_PASS: root
#      - name: Run unit tests
#        run: npm run test:unit
#      - name: Run integration tests # (linux/osx)
#        if: startsWith(runner.OS, 'windows') == false
#        run: DEBUG=testing:* npm run test:integration
#      - name: Run integration tests # (windows)
#        if: startsWith(runner.OS, 'windows')
#        run: set DEBUG=testing:* & npm run test:integration

  adapter-tests-postgres:
    if: contains(github.event.head_commit.message, '[skip ci]') == false

    needs: [check-and-lint]

    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: npm install

      - name: Run Postgres tests
        run: node node_modules/mocha/bin/mocha test/testPostgreSQL.js --exit
        env:
          SQL_PASS: postgres
  #      - name: Run unit tests
  #        run: npm run test:unit
  #      - name: Run integration tests # (linux/osx)
  #        if: startsWith(runner.OS, 'windows') == false
  #        run: DEBUG=testing:* npm run test:integration
  #      - name: Run integration tests # (windows)
  #        if: startsWith(runner.OS, 'windows')
  #        run: set DEBUG=testing:* & npm run test:integration

  adapter-tests-mssql:
    if: contains(github.event.head_commit.message, '[skip ci]') == false

    needs: [check-and-lint]

    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      sql.data:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          SA_PASSWORD: Password12!
          ACCEPT_EULA: Y
        ports:
          - "1433:1433"

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: npm install

      - name: Run MSSQL tests
        run: node node_modules/mocha/bin/mocha test/testMSSQL.js --exit
        env:
          SQL_PASS: Password12!
  #      - name: Run unit tests
  #        run: npm run test:unit
  #      - name: Run integration tests # (linux/osx)
  #        if: startsWith(runner.OS, 'windows') == false
  #        run: DEBUG=testing:* npm run test:integration
  #      - name: Run integration tests # (windows)
  #        if: startsWith(runner.OS, 'windows')
  #        run: set DEBUG=testing:* & npm run test:integration

  adapter-tests-sqlite:
    if: contains(github.event.head_commit.message, '[skip ci]') == false

    needs: [check-and-lint]

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: npm install

      - name: Run SQLite tests
        run: node node_modules/mocha/bin/mocha test/testSQLite.js --exit
      - name: Run Commons
        run: node node_modules/mocha/bin/mocha test/testCommons.js --exit

  #      - name: Run unit tests
  #        run: npm run test:unit
  #      - name: Run integration tests # (linux/osx)
  #        if: startsWith(runner.OS, 'windows') == false
  #        run: DEBUG=testing:* npm run test:integration
  #      - name: Run integration tests # (windows)
  #        if: startsWith(runner.OS, 'windows')
  #        run: set DEBUG=testing:* & npm run test:integration

  # Deploys the final package to NPM
  deploy:
    needs: [adapter-tests-mysql, adapter-tests-postgres, adapter-tests-sqlite, adapter-tests-mssql]

    # Trigger this step only when a commit on master is tagged with a version number
    if: |
      contains(github.event.head_commit.message, '[skip ci]') == false &&
      github.event_name == 'push' &&
      startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Extract the version and commit body from the tag
        id: extract_release
        # The body may be multiline, therefore we need to escape some characters
        run: |
          VERSION="${{ github.ref }}"
          VERSION=${VERSION##*/}
          VERSION=${VERSION##*v}
          echo "::set-output name=VERSION::$VERSION"
          BODY=$(git show -s --format=%b)
          BODY="${BODY//'%'/'%25'}"
          BODY="${BODY//$'\n'/'%0A'}"
          BODY="${BODY//$'\r'/'%0D'}"
          echo "::set-output name=BODY::$BODY"

      - name: Install Dependencies
        run: npm install

#      - name: Create a clean build
#        run: npm run build
      - name: Publish package to npm
        run: |
          npm config set //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
          npm whoami
          npm publish

      - name: Create Github Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release v${{ steps.extract_release.outputs.VERSION }}
          draft: false
          # Prerelease versions create prereleases on Github
          prerelease: ${{ contains(steps.extract_release.outputs.VERSION, '-') }}
          body: ${{ steps.extract_release.outputs.BODY }}

      - name: Notify Sentry.io about the release
        run: |
          npm i -g @sentry/cli
          export SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
          export SENTRY_URL=https://sentry.iobroker.net
          export SENTRY_ORG=iobroker
          export SENTRY_PROJECT=iobroker-sql
          export SENTRY_VERSION=iobroker.sql@${{ steps.extract_release.outputs.VERSION }}
          sentry-cli releases new $SENTRY_VERSION
          sentry-cli releases new $SENTRY_VERSION
          sentry-cli releases finalize $SENTRY_VERSION

        # Add the following line BEFORE finalize if sourcemap uploads are needed
        # sentry-cli releases files $SENTRY_VERSION upload-sourcemaps build/
